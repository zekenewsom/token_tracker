// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Wallet {
  id                       Int      @id @default(autoincrement())
  address                  String   @unique
  created_at               DateTime @default(now())
  transactions_source      Transaction[] @relation("SourceWallet")
  transactions_destination Transaction[] @relation("DestinationWallet")
  token_holders            TokenHolder[]
}

model Transaction {
  id                    Int      @id @default(autoincrement())
  signature             String   @unique
  blockTime             Int
  type                  String?
  tokenAmount           Float?
  token_price_usd       Float    // Price of the token itself in USD at time of tx
  source_wallet_id      Int?
  destination_wallet_id Int?
  sourceWallet          Wallet?  @relation("SourceWallet", fields: [source_wallet_id], references: [id])
  destinationWallet     Wallet?  @relation("DestinationWallet", fields: [destination_wallet_id], references: [id])
}

model TokenHolder {
  id                            Int       @id @default(autoincrement())
  wallet_id                     Int       @unique
  balance                       Float
  average_acquisition_price_usd Float?    // The final calculated average price
  total_cost_usd                Float     @default(0) // Running total of acquisition costs
  total_tokens_acquired         Float     @default(0) // Running total of tokens acquired
  last_updated                  DateTime  @default(now()) @updatedAt
  wallet                        Wallet    @relation(fields: [wallet_id], references: [id])
}

model HourlyPrice {
  id        Int      @id @default(autoincrement())
  timestamp Int      @unique // Unix timestamp (seconds) for the start of the hour
  price_usd Float
}

model CacheEntry {
  id          Int      @id @default(autoincrement())
  cache_key   String   @unique
  data        Json     // Cached response data
  expires_at  DateTime
  created_at  DateTime @default(now())
  accessed_at DateTime @default(now())
  hit_count   Int      @default(0)
  
  @@index([cache_key])
  @@index([expires_at])
}

model ApiCallLog {
  id            Int      @id @default(autoincrement())
  endpoint      String
  method        String
  response_hash String?  // Hash of response to detect changes
  success       Boolean
  created_at    DateTime @default(now())
  response_time Int?     // milliseconds
  error_message String?
  
  @@index([endpoint, created_at])
  @@index([created_at])
}

model ChangeDetectionHash {
  id           Int      @id @default(autoincrement())
  hash_type    String   @unique // e.g., 'holder_list', 'top_50_holders'
  current_hash String
  last_updated DateTime @default(now())
  
  @@index([hash_type])
}